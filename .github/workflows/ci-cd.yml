name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      DEBUG: 'False'
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,192.168.0.102,95.140.159.87
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgrespassword
      DATABASE_URL: postgres://postgres:postgrespassword@localhost:5432/postgres
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgrespassword
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create static directory
      run: mkdir -p static
    
    - name: Run migrations
      run: python manage.py migrate
    
    - name: Run tests
      run: pytest

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: mariavch/user-directory:latest  # Replace with your DockerHub username

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        envs: DEBUG,SECRET_KEY,ALLOWED_HOSTS,DB_NAME,DB_USER,DB_PASSWORD,DATABASE_URL
        script: |
          # Navigate to the project directory
          mkdir -p /home/${{ secrets.SERVER_USERNAME }}/user_directory_demo
          cd /home/${{ secrets.SERVER_USERNAME }}/user_directory_demo

          # Clone or pull the latest version of the repository
          if [ -d .git ]; then
            git pull origin main
          else
            git clone https://github.com/maria-v-ch/user_directory_demo.git .
          fi

          # Create or update the .env file
          echo "DEBUG=${DEBUG}" > .env
          echo "SECRET_KEY=${SECRET_KEY}" >> .env
          echo "ALLOWED_HOSTS=${ALLOWED_HOSTS}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "DATABASE_URL=${DATABASE_URL}" >> .env
        
          # Install Docker and Docker Compose if not already installed
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
          fi

          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Pull the latest Docker image and restart the containers
          sudo docker-compose pull
          sudo docker-compose up -d
