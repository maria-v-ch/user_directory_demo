name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      DEBUG: 'False'
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,paragoni.space,www.paragoni.space
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgrespassword
      DATABASE_URL: postgres://postgres:postgrespassword@localhost:5432/postgres
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgrespassword
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        envs: SECRET_KEY,DB_NAME,DB_USER,DB_PASSWORD,DATABASE_URL
        script: |
          # Navigate to project directory
          cd /home/${{ secrets.SERVER_USERNAME }}/user_directory_demo

          # Pull latest changes
          git pull origin main

          # Copy Apache configuration
          sudo cp paragoni.space.conf /etc/apache2/sites-available/
          sudo a2ensite paragoni.space.conf

          # Ensure SSL certificates are in place (using Apache plugin)
          sudo certbot --apache -d paragoni.space -d www.paragoni.space --non-interactive --agree-tos -m m.chuvtaeva@gmail.com

          # Reload Apache
          sudo systemctl reload apache2

          # Create .env file with environment variables
          cat << EOF > .env
          DEBUG=False
          SECRET_KEY='${SECRET_KEY}'
          ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,paragoni.space,www.paragoni.space
          DB_NAME='${DB_NAME}'
          DB_USER='${DB_USER}'
          DB_PASSWORD='${DB_PASSWORD}'
          DATABASE_URL='${DATABASE_URL}'
          EOF

          # Ensure Docker and Docker Compose are available
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo apt-get update
            sudo apt-get install -y docker.io
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found, installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Pull and start Docker containers
          sudo docker-compose pull
          sudo docker-compose up -d

          # Run migrations
          sudo docker-compose exec -T web python manage.py migrate

          # Collect static files
          sudo docker-compose exec -T web python manage.py collectstatic --noinput
