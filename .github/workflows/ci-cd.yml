name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      DEBUG: 'False'
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,paragoni.space,www.paragoni.space
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgrespassword
      DB_HOST: localhost
      DB_PORT: 5432
      DATABASE_URL: postgres://postgres:postgrespassword@localhost:5432/postgres
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgrespassword
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install django-cors-headers
    
    - name: List installed packages
      run: pip list
    
    - name: Create log directory
      run: mkdir -p logs
    
    - name: Run tests
      run: |
        pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: db
        DB_PORT: ${{ secrets.DB_PORT }}
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        envs: SECRET_KEY,DB_NAME,DB_USER,DB_PASSWORD,DB_HOST,DB_PORT
        script: |
          set -e
          echo "Starting deployment process..."
          
          # Navigate to project directory
          cd /home/${{ secrets.SERVER_USERNAME }}/user_directory_demo
          echo "Current directory: $(pwd)"

          # Pull latest changes
          git pull origin main

          # Create logs directory and set permissions
          mkdir -p logs
          chmod 777 logs
          echo "Created logs directory with appropriate permissions"

          # Copy Apache configuration
          sudo cp paragoni.space.conf /etc/apache2/sites-available/
          sudo a2ensite paragoni.space.conf

          # Ensure SSL certificates are in place (using Apache plugin)
          sudo certbot --apache -d paragoni.space -d www.paragoni.space --non-interactive --agree-tos -m m.chuvtaeva@gmail.com

          # Reload Apache
          sudo systemctl reload apache2

          # Create .env file with environment variables
          cat << EOF > .env
          DEBUG=False
          SECRET_KEY="${SECRET_KEY}"
          ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,paragoni.space,www.paragoni.space
          DB_NAME="${DB_NAME}"
          DB_USER="${DB_USER}"
          DB_PASSWORD="${DB_PASSWORD}"
          DB_HOST=db
          DB_PORT="${DB_PORT}"
          DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
          POSTGRES_DB=${DB_NAME}
          POSTGRES_USER=${DB_USER}
          POSTGRES_PASSWORD=${DB_PASSWORD}
          GRAFANA_ADMIN_PASSWORD="${GRAFANA_ADMIN_PASSWORD}"
          EOF

          echo "Created .env file"

          # Check .env file contents (mask sensitive information)
          echo "Checking .env file contents:"
          sed 's/\(SECRET_KEY=\).*/\1***/' .env | sed 's/\(DB_PASSWORD=\).*/\1***/' | sed 's/\(POSTGRES_PASSWORD=\).*/\1***/'

          # Check Docker installation
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo apt-get update
            sudo apt-get install -y docker.io
          else
            echo "Docker is already installed"
          fi

          # Check Docker Compose installation
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found, installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed"
          fi

          # Print Docker and Docker Compose versions
          docker --version
          docker-compose --version

          # Stop and remove existing containers
          echo "Stopping and removing existing containers..."
          sudo docker-compose down -v

          # Pull the latest images
          sudo docker-compose pull

          # Restart the services
          sudo docker-compose up -d --build

          # Check container status
          echo "Checking container status..."
          sudo docker-compose ps

          # Check logs for all containers
          echo "Checking logs for all containers..."
          sudo docker-compose logs

          # Wait for database to be ready
          echo "Waiting for database..."
          for i in {1..30}; do
            if sudo docker-compose exec -T db pg_isready -U ${DB_USER} -d ${DB_NAME}; then
              echo "Database is ready!"
              break
            fi
            echo "Waiting for database... (Attempt $i/30)"
            sleep 10
          done

          # Check if database is ready
          if ! sudo docker-compose exec -T db pg_isready -U ${DB_USER} -d ${DB_NAME}; then
            echo "Database failed to become ready. Exiting."
            exit 1
          fi

          # Check web container logs
          echo "Checking web container logs..."
          sudo docker-compose logs web

          # Run migrations
          echo "Running migrations..."
          sudo docker-compose exec -T web python manage.py migrate

          # Collect static files
          echo "Collecting static files..."
          sudo docker-compose exec -T web python manage.py collectstatic --noinput

          echo "Deployment process completed."

          # Make wait-for-it.sh executable
          echo "Making wait-for-it.sh executable..."
          chmod +x wait-for-it.sh

          # Start Docker containers
          echo "Starting Docker containers..."
          sudo docker-compose up -d --remove-orphans

          echo "Checking if Prometheus port is available..."
          if ! sudo lsof -i:9093 > /dev/null; then
            echo "Port 9093 is available"
          else
            echo "Warning: Port 9093 is already in use. Prometheus may not start correctly."
          fi

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build and push Docker images
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      run: |
        echo "Current working directory:"
        pwd
        echo "Creating .env file"
        cat << EOF > .env
        DEBUG=False
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,paragoni.space,www.paragoni.space
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=db
        DB_PORT=${{ secrets.DB_PORT }}
        DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
        GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        EOF
        echo "Directory contents:"
        ls -la
        echo "Searching for docker-compose.yml:"
        find . -name docker-compose.yml
        echo "Docker Compose version:"
        docker-compose --version
        echo "Building Docker images:"
        docker-compose build
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        echo "Pushing Docker images:"
        docker-compose push
